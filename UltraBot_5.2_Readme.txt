
UltraBot 5.2 - Sistema de Trading e Backtesting Automatizado

Vis√£o Geral
-------------
O UltraBot 5.2 √© um sistema automatizado de trading e backtesting focado em operar no mercado de criptomoedas usando a API da Binance Futures. Ele combina an√°lise t√©cnica com intelig√™ncia artificial para gerar sinais de compra e venda, al√©m de executar ordens de trading no modo real ou simulado (dry run). O sistema inclui funcionalidades de backtest para testar estrat√©gias com dados hist√≥ricos e dashboard para visualiza√ß√£o em tempo real do desempenho do bot.

Este sistema permite simular negocia√ß√µes com uma carteira em USDT e realizar opera√ß√µes de compra e venda, com a capacidade de avaliar o P&L (lucro e perda), taxa de acerto e outros indicadores de desempenho.

Funcionalidades
---------------
Principais Funcionalidades
- An√°lise T√©cnica: Utiliza indicadores t√©cnicos como RSI, ADX, EMA, MACD, Bandas de Bollinger e Estoc√°stico.
- Execu√ß√£o de Ordens: Capacidade de executar ordens de compra e venda na Binance Futures.
- Modo Dry Run: Simula ordens com uma carteira fict√≠cia para testar a performance sem risco financeiro.
- Backtest: Realiza testes hist√≥ricos para validar estrat√©gias de trading.
- Carteira Simulada: Simula a dedu√ß√£o de saldo durante a execu√ß√£o de ordens e atualiza o saldo conforme o P&L.
- Taxa de Acerto e P&L: Monitora e exibe a taxa de acerto, saldo da carteira e o P&L durante e ap√≥s as negocia√ß√µes.
- Dashboard em Tempo Real: Interface visual interativa utilizando Streamlit, mostrando indicadores, hist√≥rico de trades e status da carteira.

Requisitos
-----------
1. Depend√™ncias
- Python 3.x (preferencialmente Python 3.8+)
- Bibliotecas Python:
  - binance
  - openai
  - pandas
  - streamlit
  - python-dotenv
  - filelock
  - requests

Instale as depend√™ncias com o seguinte comando:
pip install -r requirements.txt

Configura√ß√£o
------------
1. Arquivo .env
Crie um arquivo .env na raiz do projeto e insira suas credenciais da Binance. As chaves s√£o necess√°rias para autentica√ß√£o com a API da Binance:

API_KEY=your_api_key
API_SECRET=your_api_secret

2. Arquivo de Configura√ß√£o (config.json)
Voc√™ pode configurar par√¢metros como valores de stop loss, take profit, alavancagem e outros ajustes no arquivo de configura√ß√£o dashboard_config.json.

Exemplo de configura√ß√£o:
{
  "dry_run": true,
  "entry_value": 100.0,
  "take_profit": 6.0,
  "stop_loss": 3.0,
  "leverage": 10.0,
  "slippage": 0.2,
  "close_order": false,
  "position_id": 0,
  "close_all_orders": false
}

3. Ativa√ß√£o do Dashboard
O sistema utiliza Streamlit para criar o dashboard. Ao iniciar o sistema, o c√≥digo automaticamente verifica se uma porta dispon√≠vel est√° livre entre 8579 e 8599 e abre o dashboard na primeira porta dispon√≠vel.

Execu√ß√£o
---------
1. Rodando o UltraBot
Para iniciar o bot e o dashboard, basta rodar o script main.py. Ele ir√° iniciar o bot e tamb√©m configurar o dashboard na porta dispon√≠vel:

python main.py

2. Intera√ß√£o com o Dashboard
Ap√≥s iniciar o sistema, o dashboard ser√° aberto automaticamente no navegador, fornecendo uma interface interativa para monitorar as opera√ß√µes de trading e exibir os resultados de backtest.

Backtest
---------
O UltraBot 5.2 inclui uma funcionalidade de backtest, que permite testar a estrat√©gia utilizando dados hist√≥ricos. O backtest √© realizado em segundo plano e os resultados s√£o salvos no arquivo backtest_results.json.

Como Funciona o Backtest
- O sistema registra os pre√ßos dos pares de criptomoedas e simula ordens de compra e venda com base em sinais de an√°lise t√©cnica.
- Quando uma ordem atinge o Take Profit (TP) ou o Stop Loss (SL), a opera√ß√£o √© fechada e o P&L √© calculado.
- O taxa de acerto e o lucro total s√£o calculados e exibidos no painel.

Visualizando os Resultados do Backtest
Os resultados do backtest s√£o exibidos no arquivo backtest_results.json. Al√©m disso, a taxa de acerto e os lucros totais tamb√©m s√£o vis√≠veis no dashboard.

M√≥dulos e Estrutura
-------------------
1. M√≥dulos Principais
- sentimento_mercado: Respons√°vel por analisar o sentimento do mercado (fundamentado em Open Interest e Funding Rates).
- icebergs: Detecta grandes ordens (icebergs) que podem afetar o pre√ßo de mercado.
- delta_volume: Calcula a varia√ß√£o de volume para identificar poss√≠veis mudan√ßas de tend√™ncia.
- liquidez: Detecta zonas de liquidez no gr√°fico.
- multi_timeframe: Valida sinais em m√∫ltiplos timeframes.
- modelo_ml: Classifica sinais usando aprendizado de m√°quina.
- logger_sinais: Registra detalhes dos sinais emitidos e aceitos.
- indicadores: Calcula indicadores t√©cnicos como RSI, EMA, ADX, MACD, Bandas de Bollinger e Estoc√°stico.
- executores: Executa ordens de trading.
- swing_detector: Detecta topos e fundos (swing highs/lows).
- validador_sinais: Valida sinais com base nos indicadores.

Notas Importantes
-----------------
- Dry Run: O modo dry run (simula√ß√£o) √© utilizado para testar a estrat√©gia sem risco financeiro, utilizando uma carteira fict√≠cia.
- Carteira Simulada: A carteira do dry run √© simulada em USDT, permitindo que o bot execute ordens e calcule o P&L e a taxa de acerto sem impacto real.
- Execu√ß√£o Real: Quando o modo dry run estiver desativado, o bot realiza negocia√ß√µes reais na Binance Futures com alavancagem configur√°vel.
- Portas do Dashboard: O sistema verifica automaticamente as portas dispon√≠veis entre 8579 e 8599 para iniciar o dashboard, garantindo que n√£o haja conflitos.

Considera√ß√µes Finais
--------------------
O UltraBot 5.2 √© uma poderosa ferramenta para traders que desejam automatizar suas opera√ß√µes no mercado de criptomoedas e realizar backtests para testar suas estrat√©gias de forma eficaz. Com a integra√ß√£o de IA e indicadores t√©cnicos, o bot oferece uma maneira robusta de operar na Binance Futures, seja para fins de simula√ß√£o (dry run) ou opera√ß√£o real.

Se voc√™ precisar de mais funcionalidades ou ajustes, basta modificar o c√≥digo conforme necess√°rio ou integrar outras intelig√™ncias artificiais para aprimorar o sistema!

Contribui√ß√µes s√£o bem-vindas! üöÄ
